const test = require('tap').test
const fs = require('fs')
const path = require('path')
const rootDir = process.cwd()
const packageJsonFilePath = path.join(rootDir, 'package.json')
const packageJson = require(packageJsonFilePath)

test('package.json file exists', t => {
    const stat = fs.statSync(packageJsonFilePath)
    t.ok(packageJson)
    t.ok(stat.size)
    t.ok(fs.existsSync(packageJsonFilePath))
    t.end()
})

test('all required fields are present', t => {
    t.ok(packageJson.name, 'should have name property')
    t.ok(packageJson.version, 'should have version property')
    t.ok(packageJson.description, 'should have description property')
    t.ok(packageJson.main, 'should have main.js property')
    t.ok(packageJson.scripts, 'should have scripts property')
    t.ok(packageJson.repository, 'should have repository property')
    t.ok(packageJson.license, 'should have license property')
    t.ok(packageJson.homepage, 'should have homepage property')
    t.ok(packageJson.dependencies, 'should have dependencies property')
    t.ok(packageJson.devDependencies, 'should have devDependencies property')
    t.end()
})

test('all required dependencies are present', t => {
    t.ok(packageJson.dependencies, 'should have dependencies')
    t.ok(packageJson.dependencies.bcryptjs, 'should have dependency bcryptjs')
    t.ok(packageJson.dependencies.express, 'should have dependency express')
    t.ok(packageJson.dependencies.mongoose, 'should have dependency mongoose')
    t.ok(packageJson.dependencies.request, 'should have dependency request')
    t.ok(packageJson.dependencies.passport, 'should have dependency passport')
    t.ok(packageJson.dependencies['connect-flash'], 'should have dependency connect-flash')
    t.ok(packageJson.dependencies['body-parser'], 'should have dependency body-parser')
    t.ok(packageJson.dependencies['cookie-parser'], 'should have dependency cookie-parser')
    t.ok(packageJson.dependencies['express-handlebars'], 'should have dependency express-handlebars')
    t.ok(packageJson.dependencies['express-messages'], 'should have dependency express-messages')
    t.ok(packageJson.dependencies['express-session'], 'should have dependency express-session')
    t.ok(packageJson.dependencies['express-validator'], 'should have dependency express-validator')
    t.ok(packageJson.dependencies['passport-http'], 'should have dependency passport-http')
    t.ok(packageJson.dependencies['passport-local'], 'should have dependency passport-local')
    t.ok(packageJson.devDependencies, 'should have devDependencies')
    t.end()
})
test('all required devDependencies are present', t => {
    t.ok(packageJson.devDependencies.tap, 'should have devDependencies tap')
    t.end()
})